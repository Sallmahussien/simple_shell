#include "main.h"

extern char **environ;

typedef struct node {
	char *data;
        unsigned int len;
	struct node* next;
} node;

/**
 * _strdup - dupplicate the string
 * @str: string
 * Return: string
 */

char *_strdup(char *str)
{
	int i, ii, len = 0;
	char *dup;

	if (str == NULL)
		return (NULL);
	for (i = 0; str[i] != '\0'; i++)
		len++;
	dup = (char *) malloc(len + 1 * sizeof(char));
	if (dup == NULL)
		return (NULL);
	for (ii = 0; ii < len; ii++)
		dup[ii] = str[ii];
	dup[ii] = '\0';
	return (dup);
}

/**
 * _strlen - Returns the length of a string
 * @s: the string
 * Return: the lenght of the string
 */


/**
 * *add_node_end - function that adds a new node at the end of a list.
 * @head: pointer to the head
 * @str: string
 * Return: the address of the new element, or NULL if it failed
 */

node *add_node_end(node **head, char *str)
{
	node *new_node, *temp;
	unsigned int len = 0;

	new_node = malloc(sizeof(node));
	if (new_node == NULL)
		return (NULL);

	len = _strlen(str);

	new_node->data = _strdup(str);
	if (new_node->data == NULL)
	{
		free(new_node);
		return (NULL);
	}
	new_node->len = len;
	new_node->next = NULL;

	if (*head == NULL)
		*head = new_node;
	else
	{
		temp = *head;
		while (temp->next != NULL)
			temp = temp->next;
		temp->next = new_node;
	}


	return (*head);
}

/**
 * print_list - function that prints all the elements of a list_t list.
 * @h: a singly linked list
 * Return: the number of nodes
 */

size_t print_list(const node *h)
{
	size_t count = 0;

	while (h != NULL)
	{
		if (h->data == NULL)
		  {
		  perror("node->str");
		  return (-1);
		  }
		else
		  {
		  write(STDOUT_FILENO, h->data, h->len);
		  write(STDOUT_FILENO, "\n", 1);
		  }
		count++;
		h = h->next;
	}

	return (count);
}

/**
 * free_list - function that frees a list_t list
 * @head: pointer to the head of the list
 * Return: void
 */

void free_list(node *head)
{
	node *temp;

	while (head != NULL)
	{
		temp = head->next;
		free(head->data);
		free(head);
		head = temp;
	}
}

/**
 * delete_node_at_index - deletes the node at index index of a listint_t.
 * @head: pointer to the address of list head
 * @index: list index to be deleted
 * Return: 1 if it succeeded, -1 if it failed
 */
int delete_node_at_index(node **head, unsigned int index)
{
	node *current, *tmp;
	unsigned int i = 0;

	if (head == NULL || *head == NULL)
		return (-1);

	if (index == 0)
	{
		tmp = *head;
		*head = (*head)->next;
		free(tmp->data);
		free(tmp);
		return (1);
	}

	current = *head;
	while (current)
	{
		if (index == (i + 1))
		{
			tmp = current->next;
			current->next = tmp->next;
			free(tmp->data);
			free(tmp);
			return (1);
		}
		current = current->next;
		i++;
	}
	return (-1);
}

/**
 * get_env - get the environment
 * Return: 2D array of environment arguments
 */

char ** get_env(void)
{
  char **curr;

  curr = environ;
  return (curr);
}

/**
 * get_env_list - creat a linked list of the environment
 * @env: 2D array of environment arguments
 * Rterun: linked list
 */

node *get_env_list(char **env)
{
	node *head;

	head = NULL;
	while(*env)
	{
	  head = add_node_end(&head, *env);
	  env++;
	}

	return (head);
}
/**
 * _env - prints the environment
 * @node: linked list
 */

void _env(node *head)
{
  
  print_list(head);
  
}

/**
 * get_linked_list_var - gives the variable name of each node
 * @curr_node:  current node of linked list
 * Return: the variable name
 */

char *get_linked_list_var(node *curr_node)
{
   char *name;
  int len, i;
  
	  len = _strlen(curr_node->data);
	  for (i = 0; curr_node->data[i] != '='; i++)
	    ;
	  name = malloc(sizeof(char) * i);
	  if (name == NULL)
	    return (0);
	  for (i = 0; curr_node->data[i] != '='; i++)
	    name[i] = curr_node->data[i];
	  name[i] = '\0';

	  return (name);
}


/**
 * set_env - change or add an environment variable
 * @var: the varibale
 * @value: the value
 * @head: the head node
 * Return: 0 or -1
 */

int set_env(char *var, char *value, node **head)
{
  node *env_list;
  char *name, *val;
  int len;

  env_list = *head;
  val = malloc(sizeof(char) * (_strlen(var) + _strlen(value) + 2));
  if (val == NULL)
    return (-1);
  _strcpy(val, var);
  _strcat(val, "=");
  _strcat(val, value);
  val[_strlen(val)] = '\0';
  
  while (env_list != NULL)
    {
      if (env_list->data == NULL)
	{
	perror("env_list");
	return (-1);
	}
      else
	{
	  name = get_linked_list_var(env_list);
	  if ( _strcmp(name, var) == 0)
	    {
	      free(env_list->data);
	      env_list->data = _strdup(val);
	      env_list->len = _strlen(val);
	      free(val);
	      free(name);
	      return (1);
	    }
	}
      env_list = env_list->next;
    }
   add_node_end(head, val);
   free(val);
   free(name);
   return (0);
}

/**
 * unsetenv - Remove an environment variable
 * @var: the variable of the environment that will be removed
 * @head: the head node
 * Return: 0 or -1
 */

int unset_env(char *var, node **head)
{
  node *env_list;
  char *name, *val;
  int len, i = 0, check;

  env_list = *head;
  while (env_list != NULL)
    {
      i++;
      if (env_list->data == NULL)
	{
	perror("env_list");
	return (-1);
	}
      else
	{
	  name = get_linked_list_var(env_list);
	  //printf("data = %s\n", env_list->data);
	  //printf("name = %s\n var = %s\n",name, var);
	  if ( _strcmp(name, var) == 0)
	    {
	      //printf("data = %s\n", env_list->data);
	      //printf("name = %s\n var = %s\n",name, var);
	      check = delete_node_at_index(head, i - 1);
	      free(name);
	      if (check == 1)
		return (0);
	      else
		{
		  perror("node not fount");
		  return (-1);
		}
	    }
	}
	env_list = env_list->next;
    }
      free(name);
      return (-1);
  
}

int main(void)
{
  node *env_list, *after;
  const char *home = getenv("HOME");
  const char *new_home;
  char **curr_env;  

   curr_env = get_env();
    env_list = get_env_list(curr_env);
    after=  get_env_list(curr_env);
  _env(env_list);

  printf("\n\n********************\n\n");

  printf("original home = %s\n", home);
  set_env("HOME", "sweet home", &env_list);
  //new_shell = getenv("SHELL");
  //printf ("new SHELL= %s\n", new_shell);

  printf("\n\n********************\n\n");

  // after_after = get_env_list();

  // print_list(env_list);



  //_env(env_list);
   printf("\n\n********************\n\n");
  set_env("salma", "ahmed", &env_list);
  printf("done\n");
   _env(env_list);
   printf("\n\n********************\n\n");

   unset_env("salma", &env_list);
  _env(env_list);
  
  free_list(env_list);
  
  return (0);
}
